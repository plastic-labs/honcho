name: Create PR for Public Changes
on:
  schedule:
    - cron: '0 9 * * 1,3,5'  # Mon, Wed, Fri at 9 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  sync-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for proper merge-base check
          
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Add public remote and fetch
        run: |
          git remote add public https://github.com/plastic-labs/honcho.git
          git fetch public
          
      - name: Check for public changes
        id: check
        run: |
          # Check if there are new commits in public/main that we don't have
          if git merge-base --is-ancestor public/main HEAD; then
            echo "No new changes - public/main is already merged"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "New changes found in public repo"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Get commit details for PR description
            echo "Getting commit details..."
            COMMITS=$(git log --oneline --no-merges HEAD..public/main)
            COMMIT_COUNT=$(git rev-list --count HEAD..public/main)
            
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            
            # Get the latest commit hash and date for branch naming
            LATEST_COMMIT=$(git log -1 --format="%h" public/main)
            echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for existing sync PR
        if: steps.check.outputs.has_changes == 'true'
        id: existing_pr
        run: |
          # Check if there's already an open sync PR
          EXISTING_PR=$(gh pr list --state open --label "sync" --json number --jq '.[0].number // empty')
          if [ ! -z "$EXISTING_PR" ]; then
            echo "Found existing sync PR #$EXISTING_PR"
            echo "has_existing_pr=true" >> $GITHUB_OUTPUT
            echo "existing_pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "No existing sync PR found"
            echo "has_existing_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create sync branch and PR
        if: steps.check.outputs.has_changes == 'true' && steps.existing_pr.outputs.has_existing_pr == 'false'
        run: |
          # Create descriptive branch name
          BRANCH_NAME="sync/public-$(date +%Y%m%d)-${{ steps.check.outputs.latest_commit }}"
          echo "Creating branch: $BRANCH_NAME"
          
          # Create and checkout sync branch
          git checkout -b $BRANCH_NAME
          
          # Attempt to merge public changes
          if git merge public/main --no-edit; then
            echo "‚úÖ Merge successful"
            
            # Push the branch
            git push origin $BRANCH_NAME
            
            # Create PR with detailed information
            gh pr create \
              --title "üîÑ Sync ${{ steps.check.outputs.commit_count }} commits from public repo" \
              --body "## üìã New commits from public honcho repo:
            
          \`\`\`
          ${{ steps.check.outputs.commits }}
          \`\`\`
          
          ## üîç Review Checklist
          - [ ] Changes don't conflict with proprietary features
          - [ ] All tests pass
          - [ ] No sensitive information exposed
          - [ ] Private enhancements still work correctly
          
          ## ü§ñ Automated Sync
          This PR was automatically created by the sync workflow.
          Branch: \`$BRANCH_NAME\`" \
              --base main \
              --head $BRANCH_NAME \
              --label "sync,automated" \
              --assignee "${{ github.repository_owner }}"
              
            echo "‚úÖ Sync PR created successfully!"
            
          else
            echo "‚ùå Merge conflicts detected"
            echo "Manual intervention required - conflicts found when merging public changes"
            
            # Create an issue instead of a PR when there are conflicts
            gh issue create \
              --title "üö® Manual sync required - merge conflicts detected" \
              --body "## ‚ö†Ô∏è Merge Conflicts Detected
            
          The automated sync from the public repo failed due to merge conflicts.
          
          **New commits that need manual merging:**
          \`\`\`
          ${{ steps.check.outputs.commits }}
          \`\`\`
          
          **To resolve manually:**
          1. \`git fetch public\`
          2. \`git checkout -b sync/manual-$(date +%Y%m%d)\`
          3. \`git merge public/main\`
          4. Resolve conflicts
          5. Create PR from the branch
          
          Branch attempted: \`$BRANCH_NAME\`" \
              --label "sync,conflicts,manual-required" \
              --assignee "${{ github.repository_owner }}"
              
            # Clean up the failed branch
            git checkout main
            git branch -D $BRANCH_NAME
            
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update existing PR comment
        if: steps.check.outputs.has_changes == 'true' && steps.existing_pr.outputs.has_existing_pr == 'true'
        run: |
          echo "Updating existing PR #${{ steps.existing_pr.outputs.existing_pr_number }} with new commit info"
          gh pr comment ${{ steps.existing_pr.outputs.existing_pr_number }} \
            --body "## üîÑ New commits detected ($(date))
          
          **Additional commits since last check:**
          \`\`\`
          ${{ steps.check.outputs.commits }}
          \`\`\`
          
          The existing sync PR may need to be updated to include these changes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: No changes found
        if: steps.check.outputs.has_changes == 'false'
        run: echo "‚úÖ Private repo is up to date with public repo"
